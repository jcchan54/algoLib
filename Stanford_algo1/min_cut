#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat May 27 13:24:43 2023

@author: johnsonchan
"""
from random import randint
file_name = '/Users/johnsonchan/Documents/CourseraCourseWorks/Stanford_algo1/W4assignment.txt'

class Graph():
    def __init__(self, file_name):
        self.graph = dict();
        self.tot_vertices = 0;
        self.tot_edges = 0;
        with open(file_name ) as file:
            for i, ln in enumerate(file):
                ls_n = [int(s) for s in ln.split()]
                self.graph[ls_n[0]] = ls_n[1:]
                self.tot_vertices += 1
                self.tot_edges += len(ls_n[1:])
        self.tot_edges=int(self.tot_edges/2)
    def choose_random_edge(self):
        v_from_i = randint(0,self.tot_vertices-1)
        v_from = list(self.graph.keys())[v_from_i]
        v_to_i = randint(0, len(self.graph[v_from])-1)
        v_to = list(self.graph[v_from])[v_to_i]
        return v_from, v_to
    def remove_edge(self, v1, v2):
        """
        re-route original edges from v1 to edges from v2
        Append edges from v2 with edges from v2
        update edges num, vertice num
        Delete v1
        """
        
        for v_e in set(self.graph[v1]):
            self.graph[v_e] = [v if v!=v1 else v2 for v in self.graph[v_e]]
        
        self.graph[v2]+= self.graph[v1]
        self.graph[v2] = [v for v in self.graph[v2] if (v!=v1) & (v!=v2)]
        self.tot_edges -= len([v for v in self.graph[v1] if v==v2])
        self.tot_vertices -= 1
        del self.graph[v1]
        return 
    def KargerMinCutter(self):
        while self.tot_vertices >2:
            v1, v2 = self.choose_random_edge()
            self.remove_edge(v1, v2)
        return self.tot_edges

min_edge = 9999
for i in range(1000):
    g = Graph(file_name) 
    min_edge_i = g.KargerMinCutter()
    if min_edge_i < min_edge:
        min_edge = min_edge_i
    print(i, min_edge)


